import /init.recovery.${ro.hardware}.rc

on early-init
    # Apply strict SELinux checking of PROT_EXEC on mmap/mprotect calls.
    write /sys/fs/selinux/checkreqprot 0

    # Set the security context for the init process.
    # This should occur before anything else (e.g. ueventd) is started.
    setcon u:r:init:s0

    start ueventd
    start healthd

on init
    export PATH /sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard
##++ Security R&D Group
    export LD_LIBRARY_PATH /system/lib64:/system/vendor/lib:/system/lib
# Make param link
    symlink /dev/block/mmcblk0p8 /dev/block/param
##-- Security R&D Group

    symlink /system/etc /etc

    mkdir /sdcard
    mkdir /sdcard1
    mkdir /.system
    mkdir /system
    mkdir /data
    mkdir /cache
    mkdir /sideload
    mkdir /preload
    mkdir /custom
    mkdir /sbfs
    mkdir /efs
    mkdir /cpefs
    mkdir /tmp
    mkdir /carrier
    mkdir /persdata
    mount tmpfs tmpfs /tmp

    chown root shell /tmp
    chmod 0775 /tmp

    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/vm/max_map_count 1000000

    emmc_quickverify

on fs
    #mkdir /dev/usb-ffs 0770 shell shell
    #mkdir /dev/usb-ffs/adb 0770 shell shell
    #mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000

    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 04e8
    write /sys/class/android_usb/android0/idProduct 6860
    #write /sys/class/android_usb/android0/f_ffs/aliases adb
    write /sys/class/android_usb/android0/functions adb
    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}

on boot
    ifup lo
    hostname localhost
    domainname localdomain
##++ Security R&D Group
# mobicore
    chmod 0700 /dev/mobicore
    chmod 0666 /dev/mobicore-user
    chown system system /dev/mobicore
    chown radio system /dev/mobicore-user
##-- Security R&D Group
    class_start default

# Load properties from /system/ + /factory after fs mount.
on load_all_props_action
    load_all_props

# Indicate to fw loaders that the relevant mounts are up.
on firmware_mounts_complete
   rm /dev/.booting

# Mount filesystems and start core system services.
on late-init
    trigger early-fs
    trigger fs
    trigger post-fs
    trigger post-fs-data

    # Load properties from /system/ + /factory after fs mount. Place
    # this in another action so that the load will be scheduled after the prior
    # issued fs triggers have completed.
    trigger load_all_props_action

    # Remove a file to wake up anything waiting for firmware
    trigger firmware_mounts_complete

    trigger early-boot
    trigger boot


on property:sys.powerctl=*
   powerctl ${sys.powerctl}

service ueventd /sbin/ueventd
    critical
    seclabel u:r:ueventd:s0

service healthd /sbin/healthd -r
    critical
    seclabel u:r:healthd:s0

service recovery /sbin/recovery
    seclabel u:r:recovery:s0

service adbd /sbin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery
    disabled
    socket adbd stream 660 system system
    seclabel u:r:adbd:s0

service kap_enable /sbin/knox_changer -e
    seclabel u:r:kapd:s0
    class main
    disabled
    oneshot

service kap_disable /sbin/knox_changer -d
    seclabel u:r:kapd:s0
    class main
    disabled
    oneshot

service static_mc /sbin/mcDriverDaemon_static -r /mcRegistry/ffffffffd0000000000000000000000a.tlbin
    seclabel u:r:mobicoredaemon:s0
    class load_dmv

on property:security.dmv=start
   class_start load_dmv

on property:security.dmv=stop
   class_reset load_dmv

##++ Security R&D Group
# MobiCore startup
service mobicore /system/bin/mcDriverDaemon -r /system/app/FFFFFFFF000000000000000000000001.drbin -r /system/app/mcRegistry/ffffffffd00000000000000000000016.tlbin
    class load_ode_env
    user system
    group system
    oneshot

on property:security.recovery=trigger_start_odeenv
   class_start load_ode_env
   setprop security.recovery running_ode

on property:security.recovery=trigger_shutdown_allenv
   class_reset load_ode_env
   setprop security.recovery shutdown_all
##-- Security R&D Group

# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
    write /sys/class/android_usb/android0/enable 1
    start adbd

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
    write /sys/class/android_usb/android0/enable 1

# Allow the Knox Active Protection mode to be set from recovery
on property:security.knox_kap_mode=true
    start kap_enable
on property:security.knox_kap_mode=false
    start kap_disable
